#!/bin/env python

# pip install fogbugz, please :)

from fogbugz import FogBugz
import os.path
import sys
import tempfile
import yaml
from subprocess import call

config = {}
domain = "https://echo.fogbugz.com/"

def main():
    readConfig()
    if len(sys.argv) <= 1:
        usage()
        return
    
    args = sys.argv[2:]
    fundict = {
            'create': create,
            'toqa': toqa,
            'resolve': resolve,
            'close': close,
            'rc': rc
            }

    logon()
    try:
        fundict[sys.argv[1]](args)
    except KeyError:
        print "Bad command\n"
        sys.exit(1)

def readConfig():
    global config
    name = os.path.expanduser("~/.managerc")
    try:
        file = open(name)
        config = yaml.load(file)
    except IOError:
        print "Bad ~/.managerc file\n"
        print "Ok, I'll generate it for you. Now please edit it.\n"
        cfg = {"fogbugz": {
            "login": "login@aboutecho.com",
            "password": "Lol123",
            "defaults": {
                "branch": "login/%d-",
                "assigned": "Name Surname",
                "project": "Echo Platform West",
                "area": "Misc",
                "category": "Bug",
                "title": "",
                "status": "New",
                "event": ""
                }
            }}

        str = yaml.dump(cfg, indent = 4, default_flow_style = False)
        with open(name, "w") as configFile:
            configFile.write(str)

        sys.exit(2)

def logon():
    global config, fb, domain
    try:
        fb = FogBugz(domain)
        login    = config["fogbugz"]["login"]
        password = config["fogbugz"]["password"]
        fb.logon(login, password)
    except KeyError:
        print "~/.managerc does not contain fogbugz's login or password\n"
        sys.exit(3)

def usage():
    print """manage/0.1
Usage:
    manage (create|toqa <case-id>|resolve <case-id>|close <case-id>|rc <case-id>)

        create
            Creates new fogbugz ticket.

        toqa <case-id>
            Setups status = QA, Assigned to = QA.

        rc <case-id>
            Like manage resolve <id> and manage close <id>.

Example:
    manage create
    manage toqa 1456
    manage rc 1456
            
"""


def editor(args = {}):
    global config, fb
    defs = config["fogbugz"]["defaults"].copy()
    defs.update(args)
    event_lines =  [4*' ' + line for line in defs['event'].splitlines()]
    defs['event'] = '\n'.join(event_lines)
    for k, v in defs.items():
        if None == v:
            defs[k] = ''
        
    msg = """title: %(title)s
branch: %(branch)s
category: %(category)s
# category could be a "Bug", "Feature" or "Inquiry"
assigned: %(assigned)s
project: %(project)s
area:    %(area)s
event: |
%(event)s

# vim: ts=4 sw=4 et ft=yaml
""" % defs
    tmp, name = tempfile.mkstemp()
    os.write(tmp, msg)
    os.close(tmp)
    EDITOR = os.environ.get('EDITOR', 'vim')
    call([EDITOR, name])
    with open(name, 'r') as tmp:
        return yaml.load(tmp)

    
def create(args):
    global fb
    ok = False
    case = {}
    while not ok:
        case = editor(case)
        ok = True
        if None == case:
            print 'Aborted.\n'
            return
        ok &= check(case, 'title', 'Bad title')
        ok &= check(case, 'branch', 'Bad branch')
        if not ok:
            print 'Type any key to edit again or "quit" to escape: '
            user = raw_input()
            if 'quit' == raw_input().strip():
                print 'Aborted.\n'
                return
    query = fbmap(case)
    ans = fb.new(**query)

    ixBug = int(ans.case['ixbug'])
    branch = case['branch'] % ixBug
    updCase = {'id': ixBug,
            'branch': branch
            }
    query = fbmap(updCase)
    ans = fb.edit(**query)

    print """Ok,
F:%(id)d - %(title)s

Fogbugz: %(domain)s?%(id)d
Branch:  %(branch)s
""" % {
        'id': ixBug,
        'title': case['title'],
        'domain': domain,
        'branch': branch
        }
    


def check(case, field, message):
    if field not in case or case[field] == None or len(case[field]) < 2:
        print message + "\n"
        return False
    return True

def fbmap(case):
    map = { 'title': 'sTitle',
            'project': 'sProject',
            'area': 'sArea',
            'category': 'sCategory',
            'priority': 'sPriority',
            'version': 'sVersion',
            'event': 'sEvent',
            'branch': 'plugin_customfields_at_fogcreek_com_branchb71',
            'message': 'sScoutMessage',
            'assigned': 'sPersonAssignedTo',
            'status': 'sStatus',
            'tags': 'sTags',
            'id':  'ixBug'
            }
    out = {}
    for k, v in map.items():
        if k in case:
            out[v] = case[k]
    return out

def toqa(args):
    global fb
    try:
        ixBug = int(args[0])
    except:
        print "Bad case number\n"
        usage
        sys.exit(1)

    params = {'id': ixBug,
            'status': 'QA',
            'assigned': 'Default Assignee (QA)'
            }
    call = fbmap(params)
    fb.edit(**call)
    print 'Task F:%d is going to QA' % ixBug

def resolve(args):
    global fb
    try:
        ixBug = int(args[0])
    except:
        print "Bad case number\n"
        usage
        sys.exit(1)

    params = {'id': ixBug }
    fb.resolve(**fbmap(params))
    print 'Task F:%d is resolved' % ixBug

def close(args):
    global fb
    try:
        ixBug = int(args[0])
    except:
        print "Bad case number\n"
        usage
        sys.exit(1)

    params = {'id': ixBug }
    fb.close(**fbmap(params))
    print 'Task F:%d is closed' % ixBug

def rc(args):
    resolve(args)
    close(args)

    


if __name__ == "__main__":
    main()

# vim: ts=4 sw=4 et ft=python
